// TrckngBldr.js => TrackingBuilder.js
// Fichier commun pour la construction des liens tracking des apps SL

const TrckngBldr = {
  QueryStringParts : {
    ABUSE: (idad) => `query=fraude&listingId=${idad}`,
    SIMILAR: 'm=detail-redirection-detail_similar',
    SIMILAR_POST_CONTACT: 'm=detail_biens_similaires_post_contact',
    DETAIL_PROFIL_ANNUAIRE: 'm=detail_agency_bloc_profile-redirection-detail_client'
  },
  
  CleanQueryStringPartsFromUrl : () => TrckngBldr.GetQueryString().replace(new RegExp(`[^\\w]m=[^&]*`, 'g'), '')
    .replace(new RegExp(`[^\\w]bd=[^&]*`, 'g'), '')
    .replace(new RegExp('^\\?&|^&', 'g'), '?'),
  
  GetQueryString : () => globalThis && globalThis.location && globalThis.location.search,
  
  BuildTrackingArgument : (type, url, valueObject) => {
    let cleanedUrlArguments = TrckngBldr.CleanQueryStringPartsFromUrl()
    
    switch(type){
      case 'abuse': return `${url}?${TrckngBldr.QueryStringParts.ABUSE(valueObject)}` //No need to clean url
      case 'similar': return `${url}${cleanedUrlArguments}${cleanedUrlArguments === '' ? '?' : '&'}${TrckngBldr.QueryStringParts.SIMILAR}` 
      case 'similarPostContact': return `${url}${cleanedUrlArguments}${cleanedUrlArguments === '' ? '?' : '&'}${TrckngBldr.QueryStringParts.SIMILAR_POST_CONTACT}` 
      case 'detailProfilAnnuaire': return `${url}${cleanedUrlArguments}${cleanedUrlArguments === '' ? '?' : '&'}${TrckngBldr.QueryStringParts.DETAIL_PROFIL_ANNUAIRE}` 
      default: return url 
    }
  }  
}

document.TrackingBuilder = TrckngBldr